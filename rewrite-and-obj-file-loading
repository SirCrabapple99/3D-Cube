import math
faceverts = []
projectedverts = []
offset = [[0, 0], [0, 0], [0, 0]]
verts = []
faces = []
objgroup = [Rect(200, 200, 200, 200)]

# obj file
icosahedron_data = """
v 0.000000 -0.525731 0.850651
v 0.850651 0.000000 0.525731
v 0.850651 -0.000000 -0.525731
v -0.850651 -0.000000 -0.525731
v -0.850651 0.000000 0.525731
v -0.525731 0.850651 -0.000000
v 0.525731 0.850651 -0.000000
v 0.525731 -0.850651 0.000000
v -0.525731 -0.850651 0.000000
v 0.000000 -0.525731 -0.850651
v 0.000000 0.525731 -0.850651
v 0.000000 0.525731 0.850651
vn 0.9342 0.3568 -0.0000
vn 0.9342 -0.3568 -0.0000
vn -0.9342 0.3568 -0.0000
vn -0.9342 -0.3568 -0.0000
vn -0.0000 0.9342 0.3568
vn -0.0000 0.9342 -0.3568
vn 0.3568 -0.0000 -0.9342
vn -0.3568 -0.0000 -0.9342
vn -0.0000 -0.9342 -0.3568
vn -0.0000 -0.9342 0.3568
vn 0.3568 -0.0000 0.9342
vn -0.3568 -0.0000 0.9342
vn 0.5774 0.5774 -0.5774
vn 0.5774 0.5774 0.5774
vn -0.5774 0.5774 -0.5774
vn -0.5774 0.5774 0.5774
vn 0.5774 -0.5774 -0.5774
vn 0.5774 -0.5774 0.5774
vn -0.5774 -0.5774 -0.5774
vn -0.5774 -0.5774 0.5774
f 2//1 3//1 7//1
f 2//2 8//2 3//2
f 4//3 5//3 6//3
f 5//4 4//4 9//4
f 7//5 6//5 12//5
f 6//6 7//6 11//6
f 10//7 11//7 3//7
f 11//8 10//8 4//8
f 8//9 9//9 10//9
f 9//10 8//10 1//10
f 12//11 1//11 2//11
f 1//12 12//12 5//12
f 7//13 3//13 11//13
f 2//14 7//14 12//14
f 4//15 6//15 11//15
f 6//16 5//16 12//16
f 3//17 8//17 10//17
f 8//18 2//18 1//18
f 4//19 10//19 9//19
f 5//20 9//20 1//20"""

# obj file conversion
icosplit = icosahedron_data.splitlines()

# my original code:
# for i in icosplit:
#     if i[0] == 'v' and i[1] != 'n' and i[1] != 't':
#         icoverts.append([float([i[2:].split(' ')][0][0]), float([i[2:].split(' ')][0][2]), float([i[2:].split(' ')][0][1])])
#     if i[0] == 'f':
#         icofaces.append([int([i[2:].split(' ')][0][0].split('/')[0]) - 1, int([i[2:].split(' ')][0][2].split('/')[0]) - 1, int([i[2:].split(' ')][0][1].split('/')[0]) - 1])


# chatgpt cleaned up this part:
for line in icosahedron_data.splitlines():
    if line.startswith('v '):
        _, x, y, z = line.split()
        verts.append([float(x), float(y), float(z)])
    elif line.startswith('f '):
        parts = line.split()[1:]
        face = [int(p.split('/')[0]) for p in parts]
        faces.append(face)
print(f"Verts: {len(verts)} | Faces: {len(faces)}\n")
print(f"Verts: {verts} \n\nFaces: {faces}")

verts = [[x * 100 for x in v] for v in verts]

def initobject():
    global verts
    global faces
    global faceverts
    global projectedverts
    faceverts = []
    for i in app.group:
        app.group.remove(i)
    # get verts of each face
    for i in faces:
        faceverts.append([
                [
                    verts[i[0] - 1][0],
                    verts[i[0] - 1][1],
                    verts[i[0] - 1][2]
                ], [
                    verts[i[1] - 1][0],
                    verts[i[1] - 1][1],
                    verts[i[1] - 1][2]
                ], [
                    verts[i[2] - 1][0],
                    verts[i[2] - 1][1],
                    verts[i[2] - 1][2]
                ]
            ])

def renderobject():
    global verts
    global faces
    global faceverts
    global projectedverts
    projectedverts = []
    for i in app.group:
        app.group.remove(i)
    # project to 2d with perspective view from the 3d vectors
    for i in faceverts:
        for x in i:
            projectedverts.append([
                [
                    (200 * (i[0][0]/(i[0][2] + 200))) + 200,
                    (200 * (i[0][1]/(i[0][2] + 200))) + 200
                ], [
                    (200 * (i[1][0]/(i[1][2] + 200))) + 200,
                    (200 * (i[1][1]/(i[1][2] + 200))) + 200
                ], [
                    (200 * (i[2][0]/(i[2][2] + 200))) + 200,
                    (200 * (i[2][1]/(i[2][2] + 200))) + 200
                ]
            ])
    # draw polygons based off 2d projection vectors
    for i in projectedverts:
        poly = Polygon(fill = None, border = 'black', borderWidth = 0.5)
        poly.pointList = i
        objgroup.append(poly)

def move(amount, xx, yy, zz):
    # translation
    global offset
    global faceverts
    offset[0][0] += amount * xx
    offset[1][0] -= amount * yy
    offset[2][0] += amount * zz
    for i in faceverts:
        for f in i:
            f[0] += amount * xx
            f[1] -= amount * yy
            f[2] += amount * zz
    renderobject()

def rotatex(amountdeg):
    global verts
    global faces
    global offset
    global faceverts
    global projectedverts
    global objgroup
    deg = amountdeg * (math.pi/180)
    for i in faceverts:
        for f in i:
            # translate to center
            f[0] -= offset[0][0]
            f[1] -= offset[1][0]
            f[2] -= offset[2][0]
            xx = f[0]
            yy = f[1]
            zz = f[2]
            # rotate
            f[1] = ((yy * math.cos(deg) - (zz * math.sin(deg))))
            f[2] = ((yy * math.sin(deg) + (zz * math.cos(deg))))
            # translate back
            f[0] += offset[0][0]
            f[1] += offset[1][0]
            f[2] += offset[2][0]
    renderobject()

def rotatey(amountdeg):
    global verts
    global faces
    global offset
    global faceverts
    global projectedverts
    global objgroup
    deg = amountdeg * (math.pi/180)
    for i in faceverts:
        for f in i:
            # translate to center
            f[0] -= offset[0][0]
            f[1] -= offset[1][0]
            f[2] -= offset[2][0]
            xx = f[0]
            yy = f[1]
            zz = f[2]
            # rotate
            f[0] = (((xx * math.cos(deg)) + (zz * math.sin(deg))))
            f[2] = (((-1 * xx) * math.sin(deg)) + (zz * math.cos(deg)))
            # translate back
            f[0] += offset[0][0]
            f[1] += offset[1][0]
            f[2] += offset[2][0]
    renderobject()

def rotatez(amountdeg):
    global verts
    global faces
    global offset
    global faceverts
    global projectedverts
    global objgroup
    deg = amountdeg * (math.pi/180)
    for i in faceverts:
        for f in i:
            # translate to center
            f[0] -= offset[0][0]
            f[1] -= offset[1][0]
            f[2] -= offset[2][0]
            xx = f[0]
            yy = f[1]
            zz = f[2]
            # rotate
            f[0] = ((xx * math.cos(deg)) - (yy * math.sin(deg)))
            f[1] = ((xx * math.sin(deg)) + (yy * math.cos(deg)))
            # translate back
            f[0] += offset[0][0]
            f[1] += offset[1][0]
            f[2] += offset[2][0]
    renderobject()

def onKeyHold(keys):
    for i in keys:
        if i == 'a':
            move(-5, 1, 0, 0)
        if i == 'd':
            move(5, 1, 0, 0)
        if i == 'w':
            move(5, 0, 0, 1)
        if i == 's':
            move(-5, 0, 0, 1)
        if i == 'space':
            move(5, 0, 1, 0)
        if i == 'c':
            move(-5, 0, 1, 0)
        if i == 'right':
            rotatey(-5)
        if i == 'left':
            rotatey(5)
        if i == 'up':
            rotatex(-5)
        if i == 'down':
            rotatex(5)
initobject()
renderobject()
